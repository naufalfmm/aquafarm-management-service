// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/ponds/index.go

// Package mock_pondsUsecases is a generated GoMock package.
package mock_pondsUsecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dao "github.com/naufalfmm/aquafarm-management-service/model/dao"
	dto "github.com/naufalfmm/aquafarm-management-service/model/dto"
)

// MockUsecases is a mock of Usecases interface.
type MockUsecases struct {
	ctrl     *gomock.Controller
	recorder *MockUsecasesMockRecorder
}

// MockUsecasesMockRecorder is the mock recorder for MockUsecases.
type MockUsecasesMockRecorder struct {
	mock *MockUsecases
}

// NewMockUsecases creates a new mock instance.
func NewMockUsecases(ctrl *gomock.Controller) *MockUsecases {
	mock := &MockUsecases{ctrl: ctrl}
	mock.recorder = &MockUsecasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecases) EXPECT() *MockUsecasesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecases) Create(ctx context.Context, req dto.CreatePondRequest) (dao.Pond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(dao.Pond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsecasesMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecases)(nil).Create), ctx, req)
}

// DeleteByID mocks base method.
func (m *MockUsecases) DeleteByID(ctx context.Context, id uint64, deletedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, deletedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockUsecasesMockRecorder) DeleteByID(ctx, id, deletedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockUsecases)(nil).DeleteByID), ctx, id, deletedBy)
}

// GetAllPaginated mocks base method.
func (m *MockUsecases) GetAllPaginated(ctx context.Context, req dto.PondPagingRequest) (dao.PondsPagingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaginated", ctx, req)
	ret0, _ := ret[0].(dao.PondsPagingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaginated indicates an expected call of GetAllPaginated.
func (mr *MockUsecasesMockRecorder) GetAllPaginated(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaginated", reflect.TypeOf((*MockUsecases)(nil).GetAllPaginated), ctx, req)
}

// GetByID mocks base method.
func (m *MockUsecases) GetByID(ctx context.Context, id uint64) (dao.Pond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(dao.Pond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUsecasesMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUsecases)(nil).GetByID), ctx, id)
}

// Upsert mocks base method.
func (m *MockUsecases) Upsert(ctx context.Context, req dto.UpsertPondRequest) (dao.Pond, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, req)
	ret0, _ := ret[0].(dao.Pond)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockUsecasesMockRecorder) Upsert(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockUsecases)(nil).Upsert), ctx, req)
}
