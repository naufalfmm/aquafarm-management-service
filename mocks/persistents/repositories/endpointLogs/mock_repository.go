// Code generated by MockGen. DO NOT EDIT.
// Source: persistents/repositories/endpointLogs/index.go

// Package mock_endpointLogsRepositories is a generated GoMock package.
package mock_endpointLogsRepositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dao "github.com/naufalfmm/aquafarm-management-service/model/dao"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositories) Create(ctx context.Context, data dao.EndpointLog) (dao.EndpointLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(dao.EndpointLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoriesMockRecorder) Create(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositories)(nil).Create), ctx, data)
}

// GetAllReports mocks base method.
func (m *MockRepositories) GetAllReports(ctx context.Context) (dao.EndpointLogReports, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllReports", ctx)
	ret0, _ := ret[0].(dao.EndpointLogReports)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllReports indicates an expected call of GetAllReports.
func (mr *MockRepositoriesMockRecorder) GetAllReports(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllReports", reflect.TypeOf((*MockRepositories)(nil).GetAllReports), ctx)
}

// GetByRequestID mocks base method.
func (m *MockRepositories) GetByRequestID(ctx context.Context, requestID string) (dao.EndpointLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRequestID", ctx, requestID)
	ret0, _ := ret[0].(dao.EndpointLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRequestID indicates an expected call of GetByRequestID.
func (mr *MockRepositoriesMockRecorder) GetByRequestID(ctx, requestID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRequestID", reflect.TypeOf((*MockRepositories)(nil).GetByRequestID), ctx, requestID)
}
