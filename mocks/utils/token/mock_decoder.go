// Code generated by MockGen. DO NOT EDIT.
// Source: utils/token/decoder.go

// Package mock_token is a generated GoMock package.
package mock_token

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	token "github.com/naufalfmm/aquafarm-management-service/utils/token"
)

// MockDecoder is a mock of Decoder interface.
type MockDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockDecoderMockRecorder
}

// MockDecoderMockRecorder is the mock recorder for MockDecoder.
type MockDecoderMockRecorder struct {
	mock *MockDecoder
}

// NewMockDecoder creates a new mock instance.
func NewMockDecoder(ctrl *gomock.Controller) *MockDecoder {
	mock := &MockDecoder{ctrl: ctrl}
	mock.recorder = &MockDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecoder) EXPECT() *MockDecoderMockRecorder {
	return m.recorder
}

// DecodeToken mocks base method.
func (m *MockDecoder) DecodeToken(t string) (token.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeToken", t)
	ret0, _ := ret[0].(token.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeToken indicates an expected call of DecodeToken.
func (mr *MockDecoderMockRecorder) DecodeToken(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeToken", reflect.TypeOf((*MockDecoder)(nil).DecodeToken), t)
}
